---
- name: Set local variable with vmname
  set_fact:
    vm_name: "{{ vmname }}"

- name: Display if skipping predeploy
  debug:
    msg:
      - "****************************************************"
      - "Skipping NSG-V predeploy because it is already present"
      - "****************************************************"
  when: node_running

- block:

  - block:
    - name: Create local temp directory
      local_action: command mktemp -d "{{ lookup('env', 'TMPDIR') | default('/tmp/', true) }}ansible.XXXX"
      register: mktemp_output

    - name: Generate ISO file
      create_zfb_profile:
      nsgv_path: "{{ mktemp_output.stdout }}"
      fact_name: nsgv_already_configured
      vsd_license_file: "{{ vsd_license_file }}"
      vsd_auth: "{{ vsd_auth }}"
      zfb_constants: "{{ zfb_constants }}"
      zfb_proxy_user: "{{ zfb_proxy_user }}"
      zfb_nsg: "{{ zfb_nsg }}"
      zfb_ports: "{{ zfb_ports }}"
      zfb_nsg_infra: "{{ zfb_nsg_infra }}"
      zfb_vsc_infra: "{{ zfb_vsc_infra }}"
      delegate_to: localhost

    - name: Ensure NSGV has the correct configuration
      assert:
        that: "not node_running or nsgv_already_configured"
        msg: "NSGV is already running, but there was no corresponding configuration for it."

    - name: Copy the ISO image to vcenter datastore
      vsphere_copy:
            src: "{{ mktemp_output.stdout }}/user_image.iso"
            path: "{{ vmname }}/user_image.iso"
            host: "{{ target_server }}"
            login: "{{ vcenter.username }}"
            password: "{{ vcenter.password }}"
            datacenter: "{{ vcenter.datacenter }}"
            datastore: "{{ vcenter.datastore }}"
            validate_certs: no
      delegate_to: localhost

    when: bootstrap_method == 'zfb_metro'

  - name: Configure vCenter path and ovftool command
    include_role:
      name: common
      tasks_from: configure-ovftool
    vars:
      management_network: "OVS Management"

  - name: Deploy NSGV image on vCenter (Can take several minutes)
    connection: local
    no_log: true
    shell: >-
      {{ ovftool_command }}
      "vi://{{ vcenter.username | urlencode }}:{{ vcenter.password | urlencode }}@{{ vcenter_path }}"

  - block:
    - name: Mount ISO when ZFB method is metro
      vsphere_guest:
        vcenter_hostname: "{{ target_server }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        guest: "{{ vm_name }}"
        validate_certs: no
        state: reconfigured
        vm_hardware:
          vm_cdrom:
            type: "iso"
            iso_path: "{{ vcenter.datastore }}/{{ inventory_hostname }}/user_image.iso"
      delegate_to: localhost
    when: bootstrap_method == 'zfb_metro'

  - block:
    - name: Mount ISO when ZFB method is external
      vsphere_guest:
        vcenter_hostname: "{{ target_server }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        guest: "{{ vm_name }}"
        validate_certs: no
        state: reconfigured
        vm_hardware:
          vm_cdrom:
            type: "iso"
            iso_path: "{{ iso_path}}/{{ iso_file }}"
      delegate_to: localhost
    when: bootstrap_method == 'zfb_external'

  - debug: var=vm_facts verbosity=1

  when: not node_running
